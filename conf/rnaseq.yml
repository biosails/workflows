---
global:
    - indir: data/processed
    - outdir: data/analysis
    - script_dir: scripts
    - conf_dir: conf
    - raw_dir: data/raw
    - raw: data/raw
    - rename_dir: data/raw/rename
    - rename: data/raw/rename
    - trimmomatic_dir: "data/processed/{$sample}/trimmomatic"
    - trimmomatic: "data/processed/{$sample}/trimmomatic"
    - trimmomatic_fastqc_dir: "data/processed/{$sample}/trimmomatic_fastqc"
    - trimmomatic_fastqc: "data/processed/{$sample}/trimmomatic_fastqc"
    - analysis_dir: data/analysis/
    - analysis: data/analysis
    - file_rule: (Sample.*)$
    - data_dir: "/scratch/Reference_Genomes/Public/Vertebrate_mammalian/Mus_musculus/ENSEMBL-release-82-GRCm38"
    - ANNOTATION:  "{$self->data_dir}/tr_Mus_musculus_GRCm38/Mus_musculus.GRCm38.82"
    - REFERENCE: "{$self->data_dir}/Mus_musculus.GRCm38.dna.toplevel"
    - htseq_dir: "data/analysis/Counts"
    - other_regexp: Sample_HepG2-(\w+)-(\w+)
    - by_sample_outdir: 1
    - find_by_dir: 1
    - override_process: 0
    - wait: 0
rules:
    - find_samples:
        local:
                - override_process: 1
                - create_outdir: 0
                - before_meta: |
                        HPC THINGS

                        #
                        #HPC jobname=mkdirs
                        #HPC module=gencore/1 gencore_rnaseq
                        #HPC cpus_per_task=1
                        #HPC ntasks=1
                        #HPC procs=1
                        #HPC walltime=00:10:00
        process: |
            {
                use File::Find::Rule;
                use List::MoreUtils qw(uniq);

                $self->samples([]);

                #Start Control Samples
                $self->stash->{controlSamples} = [];

                my @files = File::Find::Rule->file()
                                    ->name( '*.gz' )
                                    ->in( $self->indir."/control");
                my @controlK = map { $_ =~ m/HepG2-Control-(\d+)/;  my $r = $1; $r } @files;
                @controlK = uniq(@controlK);

                foreach my $c (@controlK){
                        my @t = File::Find::Rule->file()
                                        ->name( "*HepG2-Control-$c*.gz" )
                                        ->in( $self->indir."/control/");
                        my $t = $t[0];
                        my($m) = $t =~ m/(HepG2-Control-$c)/;
                        my @t = split("/", $m);
                        push( @{$self->samples}, "Sample_$t[-1]" );
                        push( @{$self->stash->{controlSamples}}, $t[-1] );
                }
                #End Control Samples

                #Start Treatment Samples
                $self->stash->{treatmentSamples} = [];

                my @files = File::Find::Rule->file()
                                    ->name( '*.gz' )
                                    ->in( $self->indir."/treatment");
                my @controlK = map { $_ =~ m/HepG2-Treatment-(\d+)/;  my $r = $1; $r } @files;
                @controlK = uniq(@controlK);

                foreach my $c (@controlK){
                        my @t = File::Find::Rule->file()
                                        ->name( "*HepG2-Treatment-$c*.gz" )
                                        ->in( $self->indir."/treatment");
                        my $t = $t[0];
                        my($m) = $t =~ m/(HepG2-Treatment-$c)/;
                        #$m =~ s/CR1-T24/Treatment/;
                        my @t = split("/", $m);
                        push( @{$self->samples}, "Sample_$t[-1]" );
                        push( @{$self->stash->{treatmentSamples}}, $t[-1] );
                }

                #Samples!
                print "#Samples are ".join("\t", @{$self->samples})."\n\n";
                #End Treatment Samples
                #Make dirs

                print "### Making Directories\n\n";
                print <<EOF;
            mkdir -p $self->{raw_dir}/rename && \\
            mkdir -p $self->{analysis_dir} && \\
            mkdir -p $self->{analysis_dir}/FPKMs &&  \\
            mkdir -p $self->{analysis_dir}/BAMs  && \\
            mkdir -p $self->{analysis_dir}/Transcripts && \\
            mkdir -p $self->{analysis_dir}/CUFFDIFF && \\
            mkdir -p $self->{analysis_dir}/Counts && \\
            mkdir -p $self->{analysis_dir}/Counts/DESeq3


            EOF

                #Rename
                print "### Renaming Files\n\n";
                print "### We already renamed them\n\n";
                #print "find $self->{indir} -name \"*CR1-T24*fastq.gz\" | xargs -I {} rename -v 's/CR1-T24/Treatment/g' {}\n";
                #print "find $self->{indir} -name \"*HepG3*fastq.gz\" | grep -v "Sample" | xargs -I {} rename -v 's/HepG2/Sample_HepG2/g' {}\n";
                #print "wait\n\n";
                #print "find $self->{indir} -name \"*HepG2*fastq.gz\" | grep -v rename| xargs -I {} ln -f -s {} $self->{raw_dir}/rename\n";
                #Things for conditions

                ($SILENTLY);
            }
    - tophat2:
        local:
                - create_outdir: 1
                - indir: "{$self->trimmomatic_dir}"
                - before_meta: |
                        HPC THINGS

                        #
                        #HPC jobname=tophat2
                        #HPC module=gencore/1 gencore_rnaseq
                        #HPC mem=24GB
                        #HPC walltime=48:00:00
                        #HPC cpus_per_task=12
                        #HPC procs=1
                        #HPC ntasks=1
                        #
        process: |
            #TASK tags={$sample}
            tophat2 -o {$self->outdir} \
            --no-novel-juncs -p 12 --transcriptome-index={$self->ANNOTATION} \
                {$self->{REFERENCE}} \
                {$self->trimmomatic_dir}/{$sample}_read1_trimmomatic_1PE.fastq.gz \
                {$self->trimmomatic_dir}/{$sample}_read2_trimmomatic_2PE.fastq.gz
    - cufflinks:
        local:
                - INPUT: "{$self->indir}/accepted_hits.bam"
                - OUTPUT: "{$self->analysis_dir}/BAMs/{$sample}_accepted_hits.bam"
                - before_meta: |
                        HPC THINGS

                        #
                        #HPC jobname=cufflinks
                        #HPC deps=tophat2
                        #HPC module=gencore/1 gencore_rnaseq
                        #HPC mem=24GB
                        #HPC walltime=48:00:00
                        #HPC cpus_per_task=12
                        #HPC procs=1
                        #HPC ntasks=1
                        #
        process: |
                #TASK tags={$sample}
                mkdir -p {$self->raw_dir}/rename && \ 
                mkdir -p {$self->analysis_dir} && \
                mkdir -p {$self->analysis_dir}/FPKMs &&  \
                mkdir -p {$self->analysis_dir}/BAMs  && \
                mkdir -p {$self->analysis_dir}/Transcripts && \
                mkdir -p {$self->analysis_dir}/CUFFDIFF && \
                mkdir -p {$self->analysis_dir}/Counts && \
                mkdir -p {$self->analysis_dir}/Counts/DESeq2 && \
                chmod -R a+rwx {$self->outdir} && \
                cufflinks -p 12 -o {$self->outdir} -G {$self->ANNOTATION}.gff {$self->INPUT} && \
                    cp {$self->INPUT} {$self->OUTPUT} && \
                    cp {$self->outdir}/gene* {$self->analysis_dir}/FPKMs/{$sample}_gene_fpkms.txt && \
                    cp {$self->outdir}/transcrip* {$self->analysis_dir}/Transcripts/{$sample}_transcripts.gtf
    - samtools_sort:
        local:
                - INPUT: "{$self->analysis_dir}/BAMs/{$sample}_accepted_hits.bam"
                - OUTPUT: "{$self->analysis_dir}/BAMs/{$sample}_sorted.accepted_hits.bam"
                - before_meta: |
                        HPC THINGS

                        #
                        #HPC jobname=samtools_sort
                        #HPC deps=tophat2
                        #HPC module=gencore/1 gencore_rnaseq
                        #HPC mem=24GB
                        #HPC walltime=24:00:00
                        #HPC cpus_per_task=12
                        #HPC procs=1
                        #HPC ntasks=1
                        #
        process: |
                #TASK tags={$sample}
                samtools sort -n -@ 6 -O bam \
                    -T {$self->analysis_dir}/BAMs/{$sample}_sorted.accepted_hits.tmp \
                    -o {$self->OUTPUT} \
                    {$self->INPUT}
    - htseq_count:
        local:
                - INPUT: "{$self->analysis_dir}/BAMs/{$sample}_sorted.accepted_hits.bam"
                - OUTPUT: "{$self->analysis_dir}/Counts/htseq_$name.txt"
                - before_meta: |
                        HPC THINGS

                        #
                        #HPC jobname=htseq_count
                        #HPC deps=samtools_sort
                        #HPC mem=24GB
                        #HPC walltime=24:00:00
                        #HPC cpus_per_task=1
                        #HPC procs=1
                        #HPC ntasks=1
                        #
        process: |
                #TASK tags={$sample}
                name=`echo {$sample}| sed s/Sample_//` && \
                htseq-count -f bam -s no -t exon \
                    -i gene_id \
                    {$self->INPUT} \
                    {$self->ANNOTATION}.gff > {$self->OUTPUT} && \
                    sed -i '/^__.*/d'  {$self->OUTPUT}
    - prepare_deseq2:
        local:
                - override_process: 1
                - create_outdir: 0
        process: |
            {
                #We have 3 replicates of each condition
                #In case where we don't know just get a count of samples matching pattern
                my $rep = 3;
                my @conditions = ('Control', 'Treatment');
                $self->stash->{conditions} = {'Control' => $rep, 'Treatment' => $rep};
                $self->stash->{lim} = @conditions;
                $self->stash->{replDescr} = [];

                foreach my $k (@conditions){
                    push(@{$self->stash->{replDescr}}, "rep(\"$k\", $rep)" );
                }
            }
    - deseq2:
        local:
                - override_process: 1
                - before_meta: |
                        HPC THINGS

                        #
                        #HPC jobname=deseq2
                        #HPC mem=24GB
                        #HPC walltime=24:00:00
                        #HPC cpus_per_task=1
                        #HPC procs=1
                        #HPC ntasks=1
                        #
        process: |
            {
                my $data = {self => \$self};
                open(my $fh, ">$self->{script_dir}/make_deseq2.R");
                Text::Template::fill_in_file("$self->{conf_dir}/make_deseq2.tpl", HASH => $data, OUTPUT => $fh);
                $OUT .= "Rscript $self->{script_dir}/make_deseq2.R"
            }
